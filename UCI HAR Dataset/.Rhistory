hist(Petal.Length)
hist("Petal.Length")
hist(petal.length)
require("datasets")
data(iris)
iris
hist(Petal.Length)
hist(iris)
?iris
data(iris)
hist(iris)
View(iris)
View(iris)
pl <- iris$Petasl.Lenght
hist(pl)
hist(Petal.Lenght)
hist(iris)
pl <- iris$Petasl.Lenght
hist(pl,
prob = TRUE,
breaks = 12,
col = "#E5E5E5",
border = 0,
main = "Petal Lenghts from Three Species of Iris")
pl <- iris$Petasl.Lenght
hist(pl,
prob = TRUE,
breaks = 12,
col = "#E5E5E5",
border = 0,
main = "Petal Lenghts from Three Species of Iris")
require(iris)
require(datasets)
iris
require(datasets)
iris
pl <- iris$Petasl.Lenght
hist(pl,
prob = TRUE,
breaks = 12,
col = "#E5E5E5",
border = 0,
main = "Petal Lenghts from Three Species of Iris")
rm(list, ls())
rm(list = ls())
pl <- iris$Petal.Length
hist(pl,
prob = TRUE,
breaks = 12,
col = "#E5E5E5",
border = 0,
main = "Petal Lengths from Three Species of Iris")
lines(density(pl), col = "darkred", lwd = 2)
rug(pl, col = "darkgray", lwd = 2)
require("datsets")
equire("datset")
require("datset")
require("dataset")
require(dataset)
require(iris)
require("iris")
require(dataset)
require("datasets")
iris
data(iris)
hist(iris$Petal.Length)
hist(iris$Petal.Length,
breaks = 11,
freq = FALSE,
col = "#E5E5E5",
main = Petal Length
xlab = density)
require("datasets")
iris
data(iris)
hist(iris$Petal.Length,
breaks = 11,
freq = FALSE,
col = "#E5E5E5",
main = "Petal Length"
xlab = "density")
hist(iris$Petal.Length,
breaks = 11,
freq = FALSE,
col = "#E5E5E5",
main = "Petal Length",
xlab = "density")
lines(density(Petal.Length, adjust = 3), col = "darkgreen"
lines(density(Petal.Length, adjust = 3), col = "darkgreen", lwd = 3)
lines(density(pl), col = "darkred", lwd = 2)
rug(pl, col = "darkgray", lwd = 2)
install.packages("RMySQL")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ucscDb <- dbConnect (MySQL(), user="genome",)
ucscDb <- dbConnect (MySQL(), user="genome", host=genome-mysql.cse.ucsc.edu)
result <- dbGetQuery (ucscDb, "show databases;"); dbDisconnect(ucscDb)
ucscDb <- dbConnect (MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery (ucscDb, "show databases;"); dbDisconnect(ucscDb)
result
hg19 <- dbConnect (MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <-dbListTables(hg19)
lenght(allTables)
hg19 <- dbConnect (MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <-dbListTables(hg19)
length(allTables)
allTables[1:5]
allTables
hg19 <- dbConnect (MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5"
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5"
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?connecctions
?connections
library(httr)
oauth_endpoints("github")
github <- oauth_endpoints(https://api.github.com/users/jtleek/repos)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46b")
github_token <- oauth2.0_token(github, my app)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ca5b8846084b8b808292")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ca5b8846084b8b808292")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints(https://github.com/settings/applications/124480)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46b")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ca5b8846084b8b808292")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints(https://api.github.com/users/jtleek/repos)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46b")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ca5b8846084b8b808292")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints(https://api.github.com/users/jtleek/repos)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46bb")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ca5b8846084b8b808292")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints(https://github.com/settings/applications/124480)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46bb")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ca5b8846084b8b808292")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints(https://github.com/settings/applications/124480)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46bb")
github <- oauth_endpoints(https://github.com/settings/applications/124480)
my app <- oauth_app("github",key="ca5b8846084b8b808292",secret = "dec7fcb734122f487558b829199f45031065e46bb")
github_token <- oauth2.0_token(github, my app)
library(httr)
require(httpuv)
require(jsonlite)
install.packages("jsonlite")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(httr)
require(httpuv)
require(jsonlite)
install.packages("httpuv")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(httr)
require(httpuv)
require(jsonlite
library(httr)
require(httpuv)
require(jsonlite)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("My_instructor_repo", "ca5b8846084b8b808292", secret="dec7fcb734122f487558b829199f45031065e46b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
oauth_endpoints("github")
myapp <- oauth_app("My_instructor_repo", "ca5b8846084b8b808292", secret="dec7fcb734122f487558b829199f45031065e46b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
install.packages("sqldf")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
library(sqldf)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
acs <- data.table(read.csv(f))
getwd()
detach("package:RMySQL", unload=TRUE)
library(sqldf)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs <- data.table(read.csv(f))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url)
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
library(sqldf)
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("downloader", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rhdf5", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
`getdata%2Fdata%2Fss06pid` <- read.csv("/var/folders/g3/1t1jvcks77j17kbd6myyhbv80000gn/T//RtmpaXSTik/datad26a52c1f974", header=FALSE)
View(`getdata%2Fdata%2Fss06pid`)
library(sqldf)
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
library(sqldf)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
View(`getdata%2Fdata%2Fss06pid`)
View(`getdata%2Fdata%2Fss06pid`)
wd()
getwd()
install.packages("plyr")
setwd("~/Desktop/UCI HAR Dataset")
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. Merges the training and the test sets to create one data set.
tmp1 <- read.table("train/X_train.txt")
tmp2 <- read.table("test/X_test.txt")
X <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/subject_train.txt")
tmp2 <- read.table("test/subject_test.txt")
S <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/y_train.txt")
tmp2 <- read.table("test/y_test.txt")
Y <- rbind(tmp1, tmp2)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("features.txt")
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, indices_of_good_features]
names(X) <- features[indices_of_good_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
# 3. Uses descriptive activity names to name the activities in the data set.
activities <- read.table("activity_labels.txt")
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity"
# 4. Appropriately labels the data set with descriptive activity names.
names(S) <- "subject"
cleaned <- cbind(S, Y, X)
write.table(cleaned, "merged_clean_data.txt")
# 5. Creates a 2nd, independent tidy data set with the average of each variable for each activity and each subject.
uniqueSubjects = unique(S)[,1]
numSubjects = length(unique(S)[,1])
numActivities = length(activities[,1])
numCols = dim(cleaned)[2]
result = cleaned[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = activities[a, 2]
tmp <- cleaned[cleaned$subject==s & cleaned$activity==activities[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "data_set_with_the_averages.txt")
training = read.csv("UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
training[,562] = read.csv("UCI HAR Dataset/train/Y_train.txt", sep="", header=FALSE)
training[,563] = read.csv("UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
testing = read.csv("UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
testing[,562] = read.csv("UCI HAR Dataset/test/Y_test.txt", sep="", header=FALSE)
testing[,563] = read.csv("UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
activityLabels = read.csv("UCI HAR Dataset/activity_labels.txt", sep="", header=FALSE)
# Read features and make the feature names better suited for R with some substitutions
features = read.csv("UCI HAR Dataset/features.txt", sep="", header=FALSE)
features[,2] = gsub('-mean', 'Mean', features[,2])
features[,2] = gsub('-std', 'Std', features[,2])
features[,2] = gsub('[-()]', '', features[,2])
# Merge training and test sets together
allData = rbind(training, testing)
# Get only the data on mean and std. dev.
colsWeWant <- grep(".*Mean.*|.*Std.*", features[,2])
# First reduce the features table to what we want
features <- features[colsWeWant,]
# Now add the last two columns (subject and activity)
colsWeWant <- c(colsWeWant, 562, 563)
# And remove the unwanted columns from allData
allData <- allData[,colsWeWant]
# Add the column names (features) to allData
colnames(allData) <- c(features$V2, "Activity", "Subject")
colnames(allData) <- tolower(colnames(allData))
currentActivity = 1
for (currentActivityLabel in activityLabels$V2) {
allData$activity <- gsub(currentActivity, currentActivityLabel, allData$activity)
currentActivity <- currentActivity + 1
}
allData$activity <- as.factor(allData$activity)
allData$subject <- as.factor(allData$subject)
tidy = aggregate(allData, by=list(activity = allData$activity, subject=allData$subject), mean)
# Remove the subject and activity column, since a mean of those has no use
tidy[,90] = NULL
tidy[,89] = NULL
write.table(tidy, "tidy.txt", sep="\t")
training = read.csv("UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
training[,562] = read.csv("UCI HAR Dataset/train/Y_train.txt", sep="", header=FALSE)
training[,563] = read.csv("UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
testing = read.csv("UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
testing[,562] = read.csv("UCI HAR Dataset/test/Y_test.txt", sep="", header=FALSE)
testing[,563] = read.csv("UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
activityLabels = read.csv("UCI HAR Dataset/activity_labels.txt", sep="", header=FALSE)
# Read features and make the feature names better suited for R with some substitutions
features = read.csv("UCI HAR Dataset/features.txt", sep="", header=FALSE)
features[,2] = gsub('-mean', 'Mean', features[,2])
features[,2] = gsub('-std', 'Std', features[,2])
features[,2] = gsub('[-()]', '', features[,2])
# Merge training and test sets together
allData = rbind(training, testing)
# Get only the data on mean and std. dev.
colsWeWant <- grep(".*Mean.*|.*Std.*", features[,2])
# First reduce the features table to what we want
features <- features[colsWeWant,]
# Now add the last two columns (subject and activity)
colsWeWant <- c(colsWeWant, 562, 563)
# And remove the unwanted columns from allData
allData <- allData[,colsWeWant]
# Add the column names (features) to allData
colnames(allData) <- c(features$V2, "Activity", "Subject")
colnames(allData) <- tolower(colnames(allData))
currentActivity = 1
for (currentActivityLabel in activityLabels$V2) {
allData$activity <- gsub(currentActivity, currentActivityLabel, allData$activity)
currentActivity <- currentActivity + 1
}
allData$activity <- as.factor(allData$activity)
allData$subject <- as.factor(allData$subject)
tidy = aggregate(allData, by=list(activity = allData$activity, subject=allData$subject), mean)
library(plyr)
download.data = function() {
"Checks for data directory and creates one if it doesn't exist"
if (!file.exists("data")) {
message("Creating data directory")
dir.create("data")
}
if (!file.exists("data/UCI HAR Dataset")) {
# download the data
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfile="data/UCI_HAR_data.zip"
message("Downloading data")
download.file(fileURL, destfile=zipfile, method="curl")
unzip(zipfile, exdir="data")
}
}
merge.datasets = function() {
"Merge training and test datasets"
# Read data
message("reading X_train.txt")
training.x <- read.table("data/UCI HAR Dataset/train/X_train.txt")
message("reading y_train.txt")
training.y <- read.table("data/UCI HAR Dataset/train/y_train.txt")
message("reading subject_train.txt")
training.subject <- read.table("data/UCI HAR Dataset/train/subject_train.txt")
message("reading X_test.txt")
test.x <- read.table("data/UCI HAR Dataset/test/X_test.txt")
message("reading y_test.txt")
test.y <- read.table("data/UCI HAR Dataset/test/y_test.txt")
message("reading subject_test.txt")
test.subject <- read.table("data/UCI HAR Dataset/test/subject_test.txt")
# Merge
merged.x <- rbind(training.x, test.x)
merged.y <- rbind(training.y, test.y)
merged.subject <- rbind(training.subject, test.subject)
# merge train and test datasets and return
list(x=merged.x, y=merged.y, subject=merged.subject)
}
extract.mean.and.std = function(df) {
# Given the dataset (x values), extract only the measurements on the mean
# and standard deviation for each measurement.
# Read the feature list file
features <- read.table("data/UCI HAR Dataset/features.txt")
# Find the mean and std columns
mean.col <- sapply(features[,2], function(x) grepl("mean()", x, fixed=T))
std.col <- sapply(features[,2], function(x) grepl("std()", x, fixed=T))
# Extract them from the data
edf <- df[, (mean.col | std.col)]
colnames(edf) <- features[(mean.col | std.col), 2]
edf
}
name.activities = function(df) {
# Use descriptive activity names to name the activities in the dataset
colnames(df) <- "activity"
df$activity[df$activity == 1] = "WALKING"
df$activity[df$activity == 2] = "WALKING_UPSTAIRS"
df$activity[df$activity == 3] = "WALKING_DOWNSTAIRS"
df$activity[df$activity == 4] = "SITTING"
df$activity[df$activity == 5] = "STANDING"
df$activity[df$activity == 6] = "LAYING"
df
}
bind.data <- function(x, y, subjects) {
# Combine mean-std values (x), activities (y) and subjects into one data
# frame.
cbind(x, y, subjects)
}
create.tidy.dataset = function(df) {
# Given X values, y values and subjects, create an independent tidy dataset
# with the average of each variable for each activity and each subject.
tidy <- ddply(df, .(subject, activity), function(x) colMeans(x[,1:60]))
tidy
}
clean.data = function() {
# Download data
download.data()
# merge training and test datasets. merge.datasets function returns a list
# of three dataframes: X, y, and subject
merged <- merge.datasets()
# Extract only the measurements of the mean and standard deviation for each
# measurement
cx <- extract.mean.and.std(merged$x)
# Name activities
cy <- name.activities(merged$y)
# Use descriptive column name for subjects
colnames(merged$subject) <- c("subject")
# Combine data frames into one
combined <- bind.data(cx, cy, merged$subject)
# Create tidy dataset
tidy <- create.tidy.dataset(combined)
# Write tidy dataset as csv
write.csv(tidy, "UCI_HAR_tidy.csv", row.names=FALSE)
}
